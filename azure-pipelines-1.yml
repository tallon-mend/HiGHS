# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest

steps:

# - task: WhiteSource@21
#   inputs:
#     cwd: '$(System.DefaultWorkingDirectory)'
#     projectName: '$(Build.DefinitionName)'
#     logLevel: "DEBUG"
#     configuration: 

- script: |
    printenv $WS_INCLUDES
  displayName: 'Check Includes Variables'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $headers = @{ 
        "Content-Type" = "application/json" 
        "Charset" = "UTF-8"
        }
      $payload = @{
        "requestType" = "getOrganizationProjectVitals"
        "userKey" = "$(AP_USERKEY)"
        "orgToken" = "$(AP_APIKEY)"
        }
      $jsonPayload = $payload | ConvertTo-Json
      $responseProjToken = Invoke-RestMethod -Uri $(AP_URL) -Method Post -Body $jsonPayload -Headers $headers
      $projectToken = $responseProjToken.projectVitals.Where({$_.name -eq "$(ProjectName)"}).token

      Write-Output $responseProjToken

      $payloadBuildTag = @{
        "requestType" = "saveProjectTag"
        "userKey" = "$(AP_USERKEY)"
        "projectToken" = $projectToken
        "tagKey" = "BuildURLKey"
        "tagValue" = "Build URL Link Here"
        }
      $payloadSecTag = @{
        "requestType" = "saveProjectTag"
        "userKey" = "$(AP_USERKEY)"
        "projectToken" = $projectToken
        "tagKey" = "InfoSecKey"
        "tagValue" = "Info Sec Tag Value Here"
        }
      $jsonPayBuildTag = $payloadBuildTag | ConvertTo-Json
      $jsonPaySecTag = $payloadSecTag | ConvertTo-Json
      Invoke-RestMethod -Uri $(AP_URL) -Method Post -Body $jsonPayBuildTag -Headers $headers
      Invoke-RestMethod -Uri $(AP_URL) -Method Post -Body $jsonPaySecTag -Headers $headers
  displayName: 'Powershell Project Tag Script'